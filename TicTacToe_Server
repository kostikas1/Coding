#include <ctype.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <signal.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#define SIZE sizeof(struct sockaddr_in)

// Function to check the status of the Tic Tac Toe board for a win
void check(char playBoard[][3]);

// Signal handler for catching signals (e.g., SIGPIPE, SIGTSTP, SIGINT)
void catcher(int sig);

int newsockfd[2];
int pid[2];

int main(void)
{
    int sockfd[2];
    char serverRead[1];
    char ans[1];
    int usr = 0;
    int ctr = 1;
    int row = 0;
    int column = 0;
    int choice = 0;
    char x[4];
    char a[2][40];

    // Tic Tac Toe board
    char playBoard[3][3] = {
        {' ', ' ', ' '},
        {' ', ' ', ' '},
        {' ', ' ', ' '}};

    // Server configuration
    struct sockaddr_in server = {AF_INET, 8001, INADDR_ANY};
    strcpy(ans, "");

    // Signal handling setup
    static struct sigaction act, act2;
    act.sa_handler = catcher;
    sigfillset(&(act.sa_mask));
    sigaction(SIGPIPE, &act, 0);
    sigaction(SIGTSTP, &act, 0);
    sigaction(SIGINT, &act, 0);

    // Socket creation and binding
    if ((sockfd[0] = socket(AF_INET, SOCK_STREAM, 0)) == -1)
    {
        perror("Socket Call Failed");
        exit(1);
    }

    if (bind(sockfd[0], (struct sockaddr *)&server, SIZE) == -1)
    {
        perror("Bind Call Failed");
        exit(1);
    }

    printf("Waiting for Players to join in TicTacToe Club.. \n");

    strcpy(a[0], "Waiting for the other Player to join\n");

    // Wait for two players to join
    while (usr < 2)
    {
        if (listen(sockfd[0], 5) == -1)
        {
            perror("Listen Call Failed\n");
            exit(1);
        }

        // Accept connection from players
        newsockfd[usr] = accept(sockfd[0], 0, 0);
        usr++;

        if (usr == 1)
        {
            strcpy(a[1], "0");
            write(newsockfd[0], a, sizeof(a));
            read(newsockfd[0], x, sizeof(x));
            pid[0] = atoi(x);
        }

        printf("No. of Players who joined the Club: %d\n");

        if (usr == 2)
        {
            // Inform players that the game is starting
            strcpy(a[0], "Let's play Tic Tac Toe!!");
            strcpy(a[1], "1");
            write(newsockfd[0], a, sizeof(a));
            strcpy(a[1], "2");
            write(newsockfd[1], a, sizeof(a));
            read(newsockfd[1], x, sizeof(x));
            pid[1] = atoi(x);
        }
    }

    // Fork to create a child process for handling the game logic
    if (fork() == 0)
    {
        int count = 0;

        // Game loop
        while (count == 0)
        {
            // Read the player's move
            read(newsockfd[ctr], serverRead, sizeof(serverRead));
            choice = atoi(serverRead);
            printf("Server side the Integer received is: %d\n", choice);

            // Update the Tic Tac Toe board
            row = --choice / 3;
            column = choice % 3;
            playBoard[row][column] = (ctr == 0) ? 'X' : 'O';

            // Switch players
            if (ctr == 1)
                ctr = 0;
            else
                ctr = 1;

            // Send the updated board to players
            write(newsockfd[ctr], playBoard, sizeof(playBoard));

            // Check for a win condition
            check(playBoard);
        }

        // Close the socket for the first player and exit the child process
        close(newsockfd[0]);
        exit(0);
    }

    // Wait for the child process to finish (game logic)
    wait();

    // Close the socket for the second player
    close(newsockfd[1]);
}

// Function to check the status of the Tic Tac Toe board for a win
void check(char playBoard[][3])
{
    int i;
    char key = ' ';

    // Check rows for a win
    for (i = 0; i < 3; i++)
        if (playBoard[i][0] == playBoard[i][1] && playBoard[i][0] == playBoard[i][2] && playBoard[i][0] != ' ')
            key = playBoard[i][0];

    // Check columns for a win
    for (i = 0; i < 3; i++)
        if (playBoard[0][i] == playBoard[1][i] && playBoard[0][i] == playBoard[2][i] && playBoard[0][i] != ' ')
            key = playBoard[0][i];

    // Check diagonals for a win
    if (playBoard[0][0] == playBoard[1][1] && playBoard[1][1] == playBoard[2][2] && play
