#include <ctype.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>
#define SIZE sizeof(struct sockaddr_in)

int play();
int menu(void);
void catcher(int sig);
void mapBoard(char playBoard[][3]);
void showLogo();
void help(void);
void playerWinhandler(int signum);
int te = 0;

int main(void)
{
    // Main loop for the menu
    while (1)
    {
        // Switch to handle menu choices
        switch (menu())
        {
        case 1:
        {
            printf("\nYou selected Play Option\n\n");
            play();
            break;
        }
        case 2:
        {
            printf("\nYou selected Help Option\n\n");
            help();
            break;
        }
        case 3:
        {
            printf("\nYou are quitting\n\n");
            exit(0);
            break;
        }
        default:
        {
            printf("\nInvalid menu choice\n\n");
            break;
        }
        }
    }
}

int play(void)
{
    void result(char[], char[]);
    static struct sigaction act;
    act.sa_handler = SIG_IGN;
    sigfillset(&(act.sa_mask));
    sigaction(SIGTSTP, &act, 0);

    signal(SIGUSR1, playerWinhandler);
    signal(SIGUSR2, playerWinhandler);

    struct sockaddr_in server = {AF_INET, 8001};
    server.sin_addr.s_addr = inet_addr("127.0.0.1");

    int sockfd, i;
    int row, column, choice;
    int iclientRead;
    char input;
    char a[2][40];
    char pid[4];
    char clientRead[3][3];
    char clientWrite[1];

    char numberBoard[3][3] = {
        {'1', '2', '3'},
        {'4', '5', '6'},
        {'7', '8', '9'}};

    char playBoard[3][3] = {
        {' ', ' ', ' '},
        {' ', ' ', ' '},
        {' ', ' ', ' '}};

    // Create a socket
    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
    {
        perror("Socket Call Failed");
        exit(1);
    }

    // Connect to the server
    if (connect(sockfd, (struct sockaddr *)&server, SIZE) == -1)
    {
        perror("Connect Call Failed");
        exit(1);
    }

    // Read initial data from the server
    read(sockfd, a, sizeof(a));
    printf("%s\n", a[0]);

    // Handle different cases based on server response
    if (strcmp(a[1], "0") == 0)
    {
        int num1 = getpid();
        sprintf(pid, "%d", num1);
        write(sockfd, pid, sizeof(pid));
        read(sockfd, a, sizeof(a));
        printf("%s\n", a[0]);
        showLogo();
    }

    if (strcmp(a[1], "2") == 0)
    {
        int num2 = getpid();
        sprintf(pid, "%d", num2);
        write(sockfd, pid, sizeof(pid));
    }

    // Handle player turns
    if (strcmp(a[1], "1") != 0)
    {
        showLogo();
        mapBoard(numberBoard);
        printf("\n    Number Board\n\n");

        for (;;)
        {
            printf("\nPlayer %d, Please enter the number of the square where you want to place your '%c': \n", (strcmp(a[1], "1") == 0) ? 1 : 2, (strcmp(a[1], "1") == 0) ? 'X' : 'O');
            scanf("%s", clientWrite);

            choice = atoi(clientWrite);
            row = --choice / 3;
            column = choice % 3;

            if (choice < 0 || choice > 9 || playBoard[row][column] > '9' || playBoard[row][column] == 'X' || playBoard[row][column] == 'O')
                printf("Invalid Input. Please Enter again.\n\n");
            else
            {
                playBoard[row][column] = (strcmp(a[1], "1") == 0) ? 'X' : 'O';
                break;
            }
        }

        write(sockfd, clientWrite, sizeof(clientWrite));
        system("clear");
        showLogo();
        mapBoard(playBoard);
        printf("\nCurrent Play Board\n\n");
    }

    // Main game loop
    for (input = 'x';;)
    {
        if (input == '\n')
        {
            if (te == 0)
            {
                mapBoard(numberBoard);
                printf("\n    Number Board\n\n");
            }

            for (;;)
            {
                if (te == 0)
                {
                    printf("\nPlayer %d, Now your turn .. Please enter the number of the square where you want to place your '%c': \n", (strcmp(a[1], "1") == 0) ? 1 : 2, (strcmp(a[1], "1") == 0) ? 'X' : 'O');
                    scanf("%s", clientWrite);

                    choice = atoi(clientWrite);
                    row = --choice / 3;
                    column = choice % 3;

                    if (choice < 0 || choice > 9 || playBoard[row][column] > '9' || playBoard[row][column] == 'X' || playBoard[row][column] == 'O')
                        printf("Invalid Input. Please Enter again.\n\n");
                    else
                    {
                        playBoard[row][column] = (strcmp(a[1], "1") == 0) ? 'X' : 'O';
                        break;
                    }
                }
            }

            write(sockfd, clientWrite, sizeof(clientWrite));
            system("clear");
            showLogo();
            mapBoard(playBoard);
            printf("\nCurrent Play Board\n\n");

            // Check for winning conditions
            if (te == 1)
            {
                printf("Player 1 Wins!!\n");
                exit(0);
            }
            if (te == 2)
            {
                printf("Player 2 Wins!!\n");
                exit(0);
            }
        }

        if (read(sockfd, clientRead, sizeof(clientRead)) > 0)
        {
            // Update the playBoard based on the received data
            system("clear");
            showLogo();
            memcpy(playBoard, clientRead, sizeof(playBoard));
            mapBoard(playBoard);
            printf("\nCurrent Play Board\n\n");
            input = '\n';

            // Check for winning conditions
            if (te == 1)
            {
                printf("Player 1 Wins!!\n");
                exit(0);
            }
            if (te == 2)
            {
                printf("Player 2 Wins!!\n");
                exit(0);
            }
        }
        else
        {
            // If the socket read
